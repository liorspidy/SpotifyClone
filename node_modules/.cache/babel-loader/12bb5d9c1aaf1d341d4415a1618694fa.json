{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\nexports.type = function (str) {\n  return str.split(/ *; */).shift();\n};\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = function (val) {\n  var obj = {};\n  var _iterator = _createForOfIteratorHelper(val.split(/ *; */)),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var str = _step.value;\n      var parts = str.split(/ *= */);\n      var key = parts.shift();\n      var _val = parts.shift();\n      if (key && _val) obj[key] = _val;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return obj;\n};\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = function (val) {\n  var obj = {};\n  var _iterator2 = _createForOfIteratorHelper(val.split(/ *, */)),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var str = _step2.value;\n      var parts = str.split(/ *; */);\n      var url = parts[0].slice(1, -1);\n      var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n      obj[rel] = url;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return obj;\n};\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = function (header, changesOrigin) {\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header.host; // secuirty\n\n  if (changesOrigin) {\n    delete header.authorization;\n    delete header.cookie;\n  }\n  return header;\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAQAA,OAAO,CAACC,IAAR,GAAe,UAACC,GAAD;EAAA,OAASA,GAAG,CAACC,KAAJ,CAAU,OAAV,EAAmBC,KAAnB,EAAT;AAAA,CAAf;AAEA;;;;;;;;AAQAJ,OAAO,CAACK,MAAR,GAAiB,UAACC,GAAD,EAAS;EACxB,IAAMC,GAAG,GAAG,EAAZ;EADwB,2CAEND,GAAG,CAACH,KAAJ,CAAU,OAAV,CAFM;IAAAK;EAAA;IAExB,oDAAsC;MAAA,IAA3BN,GAA2B;MACpC,IAAMO,KAAK,GAAGP,GAAG,CAACC,KAAJ,CAAU,OAAV,CAAd;MACA,IAAMO,GAAG,GAAGD,KAAK,CAACL,KAAN,EAAZ;MACA,IAAME,IAAG,GAAGG,KAAK,CAACL,KAAN,EAAZ;MAEA,IAAIM,GAAG,IAAIJ,IAAX,EAAgBC,GAAG,CAACG,GAAD,CAAH,GAAWJ,IAAX;IACjB;EARuB;IAAAK;EAAA;IAAAA;EAAA;EAUxB,OAAOJ,GAAP;AACD,CAXD;AAaA;;;;;;;;AAQAP,OAAO,CAACY,UAAR,GAAqB,UAACN,GAAD,EAAS;EAC5B,IAAMC,GAAG,GAAG,EAAZ;EAD4B,4CAEVD,GAAG,CAACH,KAAJ,CAAU,OAAV,CAFU;IAAAU;EAAA;IAE5B,uDAAsC;MAAA,IAA3BX,GAA2B;MACpC,IAAMO,KAAK,GAAGP,GAAG,CAACC,KAAJ,CAAU,OAAV,CAAd;MACA,IAAMW,GAAG,GAAGL,KAAK,CAAC,CAAD,CAAL,CAASM,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAZ;MACA,IAAMC,GAAG,GAAGP,KAAK,CAAC,CAAD,CAAL,CAASN,KAAT,CAAe,OAAf,EAAwB,CAAxB,EAA2BY,KAA3B,CAAiC,CAAjC,EAAoC,CAAC,CAArC,CAAZ;MACAR,GAAG,CAACS,GAAD,CAAH,GAAWF,GAAX;IACD;EAP2B;IAAAG;EAAA;IAAAA;EAAA;EAS5B,OAAOV,GAAP;AACD,CAVD;AAYA;;;;;;;;AAQAP,OAAO,CAACkB,WAAR,GAAsB,UAACC,MAAD,EAASC,aAAT,EAA2B;EAC/C,OAAOD,MAAM,CAAC,cAAD,CAAb;EACA,OAAOA,MAAM,CAAC,gBAAD,CAAb;EACA,OAAOA,MAAM,CAAC,mBAAD,CAAb;EACA,OAAOA,MAAM,CAACE,IAAd,CAJ+C,CAK/C;;EACA,IAAID,aAAJ,EAAmB;IACjB,OAAOD,MAAM,CAACG,aAAd;IACA,OAAOH,MAAM,CAACI,MAAd;EACD;EAED,OAAOJ,MAAP;AACD,CAZD","names":["exports","type","str","split","shift","params","val","obj","_step","parts","key","_iterator","parseLinks","_step2","url","slice","rel","_iterator2","cleanHeader","header","changesOrigin","host","authorization","cookie"],"sources":["C:\\Users\\liors\\Documents\\Code Projects\\JS\\ReactProject\\spotify-clone\\node_modules\\superagent\\src\\utils.js"],"sourcesContent":["/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = (str) => str.split(/ *; */).shift();\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = (val) => {\n  const obj = {};\n  for (const str of val.split(/ *; */)) {\n    const parts = str.split(/ *= */);\n    const key = parts.shift();\n    const val = parts.shift();\n\n    if (key && val) obj[key] = val;\n  }\n\n  return obj;\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = (val) => {\n  const obj = {};\n  for (const str of val.split(/ *, */)) {\n    const parts = str.split(/ *; */);\n    const url = parts[0].slice(1, -1);\n    const rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n  }\n\n  return obj;\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = (header, changesOrigin) => {\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header.host;\n  // secuirty\n  if (changesOrigin) {\n    delete header.authorization;\n    delete header.cookie;\n  }\n\n  return header;\n};\n"]},"metadata":{},"sourceType":"script"}